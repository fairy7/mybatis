<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        1.mybatis可以使用properties来引入外部properties配置文件的内容：
            resource:引入类路径下的资源
            url:引入网络路径或磁盘路径下资源
    -->
    <properties resource="db.properties"/>
    
    <!--
        2.settings包含很多重要的设置项
    -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- 显示的指定每个我们需要更改的配置的值，即使它是默认的。防止版本更新带来的问题 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
    </settings>

    <!--1
        3.typeAliases别名处理器，可以为Java类型起别名
            (不区分大小写)
    -->
    <typeAliases>
        <!-- typeAlias:为某个Java类型起别名
                type:指定要起别名的Java类型全名称，默认类名小写。employee
                alias：指定新的别名
        -->
        <typeAlias type="com.study.bean.Employee" alias="emp"/>
        <!-- package：为某个报下的所类批量起别名
                name：指定包名（当前包以及所有的子包的每个类都起一个默认别名）
        -->
        <package name="com.study.bean"/>
        <!-- 注解@alias -->
    </typeAliases>
    <!--
       4.environments:环境，mybatis可以配置多种环境，default指定使用某种环境。可以达到快速切换
            environment:配置一个具体的环境信息,必须有两个标签。id代表当前环境的唯一标识
                transactionManager:事务管理器
                    type:事务管理器类型[JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)]
                        自定义事务管理器：实现TransactionFactory接口，type指定为全类名

                dataSource：数据源
                    type:数据源类型[UNPOOLED(UnpooledDataSourceFactory)
                                    |POOLED(PooledDataSourceFactory)
                                    |JNDI(JndiDataSourceFactory)]
                        自定义数据源：实现DataSourceFactory接口，type指定为全类名
    -->
    <environments default="development">
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED"/>
        </environment>
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 5.databaseIdProvider:支持多数据库厂商
         type="DB_VENDOR":VendorDatabaseIdProvider
            作用就是得到数据库厂商的标识（驱动getDatabaseProductName()），mybatis就能根据数据库厂商标识来执行不同的sql
            MySQL,Oracle,SQL Server,xxx
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名-->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlServer"/>
    </databaseIdProvider>

    <!-- 6.mappers:将sql映射注册到全局配置中 -->
    <mappers>
        <!--
            mapper:注册一个sql映射
                注册配置文件
                resource：引用类路径下的sql映射文件
                    <mapper resource="org/mybatis/builder/PostMapper.xml"/>
                url:引用网络或磁盘路径下的sql映射文件
                    <mapper url="file:///var/mappers/BlogMapper.xml"/>
                注册接口
                class:引用（注册）接口
                    1.有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
                    2.没有sql映射文件，所有的sql都是利用注解写在接口上；

                推荐：比较重要的，复杂的Dao接口写sql映射文件
                     不重要的，简单的Dao接口为了开发快速可以使用注解
        -->
        <!--<mapper resource="org/mybatis/example/BlogMapper.xml"/>-->
        <!--<mapper resource="EmployeeMapper.xml"/>
        <mapper class="com.study.chapter02.dao.EmployeeMapperAnnotation"/>-->

        <!-- 批量注册:要求同目录或者注解形式 -->
        <package name="com.study.chapter03.dao"/>
    </mappers>
</configuration>