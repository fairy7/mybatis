单个参数：mybatis不会做特殊处理
    #{参数值}

多个参数：mybatis会做特殊处理
    多个参数会被封装成一个map，
        key:param,param1,param2...paramN，或者参数的索引也可以
        value:传入的参数值
    #{}就是从map中获取指定key的值

    org.apache.ibatis.binding.BindingException: Parameter 'id' not found.
    Available parameters are [0, 1, param1, param2]

命名参数：明确指定封装参数时map的key: @param("id")
    多个参数会被封装成一个map，
        key:使用@param注解指定的值
        value:参数值
    #{指定的key}阙处对应的参数值

POJO:
如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo
    #{属性名}：取出传入的pojo的属性值

Map:
如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map,
    #{key}:取出map中对应的值

TO:
如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO(Transfer Object)数据传输对象
Page {
    int index;
    int size;
}

=====================================思考====================================
Employee getEmp(@Param("id")Integer id, String lastName);
        取值：id ===> #{id/param1}       lastName ===> #{param2}

Employee getEmp(Integer id, @Param("e")Employee emp);
        取值：id ===> #{param1}       lastName ===> #{e.lastName}

##特别注意：如果是collection(List,Set)类型或者是数组，
            也会特殊处理。也是把传入的list或者数组封装在map中。
                key:Collection(collection),如果是List还可以使用这个key(list)
                    数组（array）
Employee getEmpById(List<Integer> ids);
        取值：取出第一个id的值，#{list[0]}

===================================结合源码，mybatis怎么处理参数==================================
ParamNameResolver解析参数封装map的；

public Object getNamedParams(Object[] args) {
    final int paramCount = names.size();
    if (args == null || paramCount == 0) {
      return null;
    } else if (!hasParamAnnotation && paramCount == 1) {
      return args[names.firstKey()];
    } else {
      final Map<String, Object> param = new ParamMap<Object>();
      int i = 0;
      for (Map.Entry<Integer, String> entry : names.entrySet()) {
        param.put(entry.getValue(), args[entry.getKey()]);
        // add generic param names (param1, param2, ...)
        final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);
        // ensure not to overwrite parameter named with @Param
        if (!names.containsValue(genericParamName)) {
          param.put(genericParamName, args[entry.getKey()]);
        }
        i++;
      }
      return param;
    }
  }

=======================================参数值的获取========================================
#{}:可以获取map中的值或者pojo对象属性的值；
${}:可以获取map中的值或者pojo对象属性的值；
    区别：
        #{}:是以预编译的形式，将参数设置到sql语句中；prepareStatement;防止sql注入
        ${}:取出的值直接拼装在sql语句中；会有安全问题；
        大多数情况下，我们取参数的值都应该去使用#{}；

        原生jdbc不支持占位符的地方我们就可以使用${}进行取值
        比如分表,排序。。。；按照年份分表拆分：
            select * from ${year}_salary where xxx;
            select * from tbl_employee order by ${f_name} ${order}

#{}：更丰富的用法：
    规定参数的一些规则：
    JavaType,jdbcType,mode(存储过程),numericScale,
    resultMap,typeHandler,jdbcTypeName,expression（未来准备支持的功能）

    jdbcType通常在某种特定的条件下被设置：
        在我们数据为null的时候，某些数据库可能不能识别mybatis对null的默认处理。比如Oracle(报错);
        JdbcType OTHER:无效的类型：因为mybatis对所有的null都映射的是Jdbc OTHER类型，Oracle不能正确 处理；
        <insert id="addEmp" parameterType="com.study.chapter02.bean.Employee"
            databaseId="oracle">
            insert into employee (last_name, gender, email) VALUES (#{lastName}, #{gender}, #{email,jdbcType=NULL})
        </insert>
        由于全局配置中：jdbcTypeForNull=OTHER;oracle不支持；
        1.#{email,jdbcType=NULL}
        2.jdbcTypeForNull=NULL(改全局配置)