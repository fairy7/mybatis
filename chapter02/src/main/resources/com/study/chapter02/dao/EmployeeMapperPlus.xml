<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.chapter02.dao.EmployeeMapperPlus">

    <!-- 自定义某个JavaBean的封装规则
        type: 自定义规则的Java类型
        id: 唯一id方便引用
     -->
    <resultMap id="myEmp" type="com.study.chapter02.bean.Employee">
        <!-- 指定主键列的封装规则
            id 定义主键会底层有优化；
            column: 指定哪一列
            property: 只当对应的JavaBean属性
         -->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName"/>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>

    <!-- resultMap:自定义结果集映射规则； -->

    <!-- Employee getEmpById(Integer id); -->
    <select id="getEmpById" resultMap="myEmp">
        select * from employee where id = #{id}
    </select>

    <!--
     场景一：
        查询employee的同时查询员工对应的部门
        employee === department
        一个员工与之对应的部门信息
     -->
    <!-- 联合查询：级联属性封装结果集 -->
    <resultMap id="myDifEmp" type="com.study.chapter02.bean.Employee">
        <id column="e.id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="d_id" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
    </resultMap>

    <!--
        使用association定义单个对象的封装规则
    -->
    <resultMap id="myDifEmp2" type="com.study.chapter02.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>


        <!-- association可以指定联合的JavaBean对象 -->
        <association property="dept" javaType="com.study.chapter02.bean.Department">
            <id column="id" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>
    <!-- Employee getEmpAndDept(Integer id); -->
    <select id="getEmpAndDept" resultMap="myDifEmp2">
        select * from employee e left join dept d on e.d_id = d.id where e.id = #{id}
    </select>

    <!-- 使用association进行分步查询:
            1.先按照员工id查询员工信息
            2.根据员工信息中的d_id值去部门表查出部门信息
            3.部门设置到员工中
     -->
    <resultMap id="myEmpByStep" type="com.study.chapter02.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>

        <!--
        association定义关联对象的封装属性
        select：表明当前属性是调用select指定的方法查出的结果
        -->
        <association property="dept"
                     select="com.study.chapter02.dao.DepartmentMapper.getDeptById"
                     column="id"/>
    </resultMap>
    <!-- Employee getEmpByIdStep(Integer id); -->
    <select id="getEmpByIdStep" resultMap="myEmpDis">
        select * from employee where id = #{id}
    </select>

    <!-- 可以使用延迟加载：
        employee ==》 dept
            我们每次查询employee对象的时候，都将一起查询出来
            部门信息在我们使用的时候再去查询
        分部查询上加上两个配置：
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
    -->

    <!--
    场景二:
        查询部门的时候将部门对应的所有员工信息也查出来：注释在DepartmentMapper.xml中
    -->
    <!-- List<Employee> getEmpsByDeptId(Integer id); -->
    <select id="getEmpsByDeptId" resultType="com.study.chapter02.bean.Employee">
        select * from employee where d_id = #{deptId}
    </select>
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装行为employee：
            如果查出的是女生，就把部门信息查出来，否则不查询；
            如果是男生，把last_name这一列的值赋值给email;
    -->
    <resultMap id="myEmpDis" type="com.study.chapter02.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>

        <!--
            column:指定判断的列名
            javaType:列值对应的Java类型
        -->
        <discriminator javaType="string" column="gender">
            <!-- 女生 resultType:指定封装的结果类型,不能缺少。resultMap -->
            <case value="0" resultType="com.study.chapter02.bean.Employee">
                <association property="dept"
                             select="com.study.chapter02.dao.DepartmentMapper.getDeptById"
                             column="id"/>
            </case>
            <case value="1" resultType="com.study.chapter02.bean.Employee">
                <result column="last_name" property="email"/>
            </case>
        </discriminator>
    </resultMap>
</mapper>